[
  {
    "id": 1,
    "text": "Use nouns instead of verbs in endpoints",
    "category": "Design",
    "priority": "high",
    "completed": false,
    "description": "REST endpoints should represent resources (nouns) rather than actions (verbs). This makes your API more intuitive and follows REST principles.",
    "example": "Good: GET /users/123 | Bad: GET /getUser/123",
    "references": [
      {
        "title": "REST API Design Best Practices",
        "url": "https://restfulapi.net/resource-naming/"
      },
      {
        "title": "RESTful Web Services",
        "url": "https://www.oreilly.com/library/view/restful-web-services/9780596529260/"
      }
    ]
  },
  {
    "id": 2,
    "text": "Use plural nouns for collections",
    "category": "Design",
    "priority": "high",
    "completed": false,
    "description": "Collections of resources should use plural nouns to clearly indicate that multiple items can be returned.",
    "example": "Good: GET /users | Bad: GET /user",
    "references": [
      {
        "title": "REST Resource Naming Guide",
        "url": "https://restfulapi.net/resource-naming/"
      },
      {
        "title": "API Design Patterns",
        "url": "https://microservices.io/patterns/data/api-composition.html"
      }
    ]
  },
  {
    "id": 13,
    "text": "Use consistent naming conventions",
    "category": "Design",
    "priority": "medium",
    "completed": false,
    "description": "Maintain consistent naming patterns throughout your API (camelCase, snake_case, or kebab-case). Consistency improves developer experience.",
    "example": "Choose one: user_name, userName, or user-name and stick with it",
    "references": [
      {
        "title": "API Naming Conventions",
        "url": "https://blog.restcase.com/5-basic-rest-api-design-guidelines/"
      },
      {
        "title": "Google API Design Guide",
        "url": "https://cloud.google.com/apis/design/naming_convention"
      }
    ]
  },
  {
    "id": 15,
    "text": "Use appropriate response formats (JSON)",
    "category": "Design",
    "priority": "high",
    "completed": false,
    "description": "JSON is the standard for modern APIs due to its lightweight nature and universal support. Ensure consistent JSON structure across endpoints.",
    "example": "Content-Type: application/json with proper JSON formatting",
    "references": [
      {
        "title": "JSON API Specification",
        "url": "https://jsonapi.org/"
      },
      {
        "title": "REST API Response Format",
        "url": "https://restfulapi.net/json-jsonp/"
      }
    ]
  },
  {
    "id": 3,
    "text": "Use proper HTTP status codes (2xx, 4xx, 5xx)",
    "category": "HTTP",
    "priority": "high",
    "completed": false,
    "description": "HTTP status codes communicate the result of requests clearly. Use 2xx for success, 4xx for client errors, and 5xx for server errors.",
    "example": "200 OK, 201 Created, 400 Bad Request, 404 Not Found, 500 Internal Server Error",
    "references": [
      {
        "title": "HTTP Status Codes",
        "url": "https://httpstatuses.com/"
      },
      {
        "title": "MDN HTTP Status Codes",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"
      },
      {
        "title": "REST API Status Codes",
        "url": "https://restfulapi.net/http-status-codes/"
      }
    ]
  },
  {
    "id": 4,
    "text": "Implement proper error handling with consistent format",
    "category": "HTTP",
    "priority": "high",
    "completed": false,
    "description": "Standardize error responses with clear messages, error codes, and helpful information for debugging and user feedback.",
    "example": "{\"error\": {\"code\": \"VALIDATION_ERROR\", \"message\": \"Email is required\", \"field\": \"email\"}}",
    "references": [
      {
        "title": "API Error Handling Best Practices",
        "url": "https://blog.restcase.com/rest-api-error-codes-101/"
      },
      {
        "title": "Problem Details for HTTP APIs",
        "url": "https://tools.ietf.org/html/rfc7807"
      }
    ]
  },
  {
    "id": 5,
    "text": "Use HTTP methods correctly (GET, POST, PUT, DELETE)",
    "category": "HTTP",
    "priority": "high",
    "completed": false,
    "description": "Each HTTP method has a specific purpose: GET for retrieval, POST for creation, PUT for updates, DELETE for removal. Follow these semantics.",
    "example": "GET /users (list), POST /users (create), PUT /users/123 (update), DELETE /users/123 (remove)",
    "references": [
      {
        "title": "HTTP Methods",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"
      },
      {
        "title": "REST HTTP Methods",
        "url": "https://restfulapi.net/http-methods/"
      }
    ]
  },
  {
    "id": 6,
    "text": "Implement pagination for large datasets",
    "category": "Performance",
    "priority": "medium",
    "completed": false,
    "description": "Prevent performance issues and timeouts by limiting response sizes. Implement cursor-based or offset-based pagination.",
    "example": "GET /users?page=2&limit=20 or GET /users?cursor=abc123&limit=20",
    "references": [
      {
        "title": "API Pagination Best Practices",
        "url": "https://nordicapis.com/everything-you-need-to-know-about-api-pagination/"
      },
      {
        "title": "Cursor vs Offset Pagination",
        "url": "https://slack.engineering/evolving-api-pagination-at-slack/"
      }
    ]
  },
  {
    "id": 7,
    "text": "Add caching headers (Cache-Control, ETag)",
    "category": "Performance",
    "priority": "medium",
    "completed": false,
    "description": "Implement HTTP caching to reduce server load and improve response times. Use Cache-Control for cache policies and ETags for conditional requests.",
    "example": "Cache-Control: max-age=3600, ETag: \"abc123\"",
    "references": [
      {
        "title": "HTTP Caching",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching"
      },
      {
        "title": "REST API Caching",
        "url": "https://restfulapi.net/caching/"
      }
    ]
  },
  {
    "id": 8,
    "text": "Implement rate limiting",
    "category": "Security",
    "priority": "high",
    "completed": false,
    "description": "Protect your API from abuse and ensure fair usage by implementing rate limiting. Communicate limits through headers.",
    "example": "X-RateLimit-Limit: 1000, X-RateLimit-Remaining: 999, X-RateLimit-Reset: 1609459200",
    "references": [
      {
        "title": "API Rate Limiting",
        "url": "https://nordicapis.com/everything-you-need-to-know-about-api-rate-limiting/"
      },
      {
        "title": "Rate Limiting Strategies",
        "url": "https://blog.cloudflare.com/counting-things-a-lot-of-different-things/"
      }
    ]
  },
  {
    "id": 9,
    "text": "Use HTTPS everywhere",
    "category": "Security",
    "priority": "high",
    "completed": false,
    "description": "Encrypt all API communications to protect sensitive data in transit. HTTPS is essential for security and is required by modern browsers.",
    "example": "https://api.example.com instead of http://api.example.com",
    "references": [
      {
        "title": "Why HTTPS Matters",
        "url": "https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https"
      },
      {
        "title": "HTTPS Best Practices",
        "url": "https://httpsiseasy.com/"
      }
    ]
  },
  {
    "id": 10,
    "text": "Implement proper authentication (JWT, OAuth)",
    "category": "Security",
    "priority": "high",
    "completed": false,
    "description": "Secure your API with robust authentication mechanisms. JWT for stateless auth, OAuth for third-party integrations.",
    "example": "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "references": [
      {
        "title": "JWT Introduction",
        "url": "https://jwt.io/introduction/"
      },
      {
        "title": "OAuth 2.0",
        "url": "https://oauth.net/2/"
      },
      {
        "title": "API Authentication Best Practices",
        "url": "https://blog.restcase.com/restful-api-authentication-basics/"
      }
    ]
  },
  {
    "id": 14,
    "text": "Implement input validation",
    "category": "Security",
    "priority": "high",
    "completed": false,
    "description": "Validate all input data to prevent injection attacks and ensure data integrity. Use schema validation and sanitization.",
    "example": "Validate email format, check string lengths, sanitize SQL inputs",
    "references": [
      {
        "title": "Input Validation Guide",
        "url": "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
      },
      {
        "title": "API Security Best Practices",
        "url": "https://owasp.org/www-project-api-security/"
      }
    ]
  },
  {
    "id": 11,
    "text": "Version your API (/v1/, /v2/)",
    "category": "Versioning",
    "priority": "medium",
    "completed": false,
    "description": "API versioning allows you to evolve your API without breaking existing clients. Use URL versioning, header versioning, or parameter versioning.",
    "example": "https://api.example.com/v1/users or Accept: application/vnd.api+json;version=1",
    "references": [
      {
        "title": "API Versioning Best Practices",
        "url": "https://restfulapi.net/versioning/"
      },
      {
        "title": "API Versioning Strategies",
        "url": "https://nordicapis.com/api-versioning-methods-a-brief-reference/"
      }
    ]
  },
  {
    "id": 12,
    "text": "Provide comprehensive API documentation",
    "category": "Documentation",
    "priority": "low",
    "completed": false,
    "description": "Good documentation is crucial for API adoption. Include examples, error codes, authentication details, and interactive testing capabilities.",
    "example": "Use tools like Swagger/OpenAPI, Postman, or custom documentation sites",
    "references": [
      {
        "title": "OpenAPI Specification",
        "url": "https://swagger.io/specification/"
      },
      {
        "title": "API Documentation Best Practices",
        "url": "https://blog.readme.com/api-documentation-best-practices/"
      },
      {
        "title": "Postman Documentation",
        "url": "https://learning.postman.com/docs/publishing-your-api/documenting-your-api/"
      }
    ]
  },
  {
    "id": 16,
    "text": "Configure and test Cross-Origin Resource Sharing (CORS) thoroughly",
    "category": "Security",
    "priority": "high",
    "completed": false,
    "description": "Properly configure CORS to control which domains can access your API, avoiding wildcard origins in production. This includes correctly handling preflight OPTIONS requests for complex scenarios, securely managing credentials (`Access-Control-Allow-Credentials`), and thoroughly testing the entire setup to prevent security vulnerabilities.",
    "example": "// Correct headers\nAccess-Control-Allow-Origin: https://your-frontend-app.com\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Content-Type, Authorization\n\n// Testing with curl\ncurl -H \"Origin: https://yourapp.com\" -X OPTIONS https://api.example.com/data",
    "references": [
      {
        "title": "MDN - Cross-Origin Resource Sharing (CORS)",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"
      },
      {
        "title": "CORS Credentials Security",
        "url": "https://portswigger.net/web-security/cors"
      }
    ]
  },
  {
    "id": 17,
    "text": "Implement comprehensive logging and monitoring",
    "category": "Security",
    "priority": "medium",
    "completed": false,
    "description": "Log all requests and critical events (like authentication attempts, errors, data modification). This is essential for debugging, security auditing, and monitoring API health.",
    "example": "Log format: [Timestamp] [Level] [Request-ID] [User-ID] [HTTP Method] [Endpoint] [Status Code]",
    "references": [
      {
        "title": "OWASP Logging Cheat Sheet",
        "url": "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
      }
    ]
  },
  {
    "id": 24,
    "text": "Enable compression (Gzip, Brotli)",
    "category": "Performance",
    "priority": "medium",
    "completed": false,
    "description": "Use compression to reduce the size of the response payload. This significantly improves response times, especially for clients with slow network connections.",
    "example": "Request header: Accept-Encoding: gzip, deflate, br | Response header: Content-Encoding: gzip",
    "references": [
      {
        "title": "MDN - HTTP compression",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Compression"
      },
      {
        "title": "Google Web Fundamentals - Text Compression",
        "url": "https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/text-compression"
      }
    ]
  },
  {
    "id": 25,
    "text": "Provide filtering, sorting, and field selection capabilities",
    "category": "Design",
    "priority": "medium",
    "completed": false,
    "description": "Allow clients to request only the data they need. This makes the API more flexible and reduces payload size. Filtering is done via query parameters, sorting specifies the order, and field selection limits the returned JSON fields.",
    "example": "GET /users?status=active&sort=-createdAt&fields=id,name,email",
    "references": [
      {
        "title": "JSON:API - Fetching Data (Sorting, Filtering, etc.)",
        "url": "https://jsonapi.org/format/#fetching"
      }
    ]
  },
  {
    "id": 26,
    "text": "Ensure idempotency for PUT, PATCH, and DELETE methods",
    "category": "HTTP",
    "priority": "high",
    "completed": false,
    "description": "An idempotent operation can be called multiple times with the same input without changing the result beyond the initial application. This is crucial for building reliable clients that can safely retry requests after a network failure.",
    "example": "DELETE /users/123 will always result in user 123 being deleted, whether called once or ten times.",
    "references": [
      {
        "title": "MDN - Idempotent HTTP methods",
        "url": "https://developer.mozilla.org/en-US/docs/Glossary/Idempotent"
      },
      {
        "title": "Stripe API - Designing for Idempotency",
        "url": "https://stripe.com/blog/idempotency"
      }
    ]
  }
] 